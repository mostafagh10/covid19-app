{"version":3,"sources":["components/data/index.js","components/form/index.js","components/worlddata/index.js","App.js","serviceWorker.js","index.js"],"names":["Data","className","this","props","data","confirmed","recovered","deaths","Component","Form","onChange","getcountrydata","selected","hidden","returncountries","library","add","faGlobeAmericas","World","icon","confirmed2","recovered2","deaths2","App","state","countries","map","country","i","key","bind","getdata","axios","get","restapi","restcountries","x","length","push","name","setState","value","e","target","res","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAmCeA,G,6KA5Bb,OACE,yBAAKC,UAAU,QACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,kBACb,yCACA,4BAAKC,KAAKC,MAAMC,KAAKC,UAArB,YAGF,yBAAKJ,UAAU,YACf,yBAAKA,UAAU,mBACb,yCACA,4BAAKC,KAAKC,MAAMC,KAAKE,UAArB,YAGF,yBAAKL,UAAU,YACf,yBAAKA,UAAU,eACb,sCACA,4BAAKC,KAAKC,MAAMC,KAAKG,OAArB,kB,GArBaC,cCgBJC,G,6KAbb,OACE,yBAAKR,UAAU,QACb,4BAAQS,SAAUR,KAAKC,MAAMQ,gBAC7B,kCACA,4BAAQC,UAAQ,EAACC,QAAM,GAAvB,sBACGX,KAAKC,MAAMW,yB,GARDN,c,6BCEnBO,EAAQC,IAAIC,K,IAoCGC,E,uKA/Bb,OACE,yBAAKjB,UAAU,SACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAiBkB,KAAK,iBAAiBlB,UAAU,SACjD,yCACA,4BAAKC,KAAKC,MAAMC,KAAKgB,WAArB,YAGF,yBAAKnB,UAAU,YACf,yBAAKA,UAAU,oBACf,kBAAC,IAAD,CAAiBkB,KAAK,iBAAiBlB,UAAU,SAC/C,yCACA,4BAAKC,KAAKC,MAAMC,KAAKiB,WAArB,YAGF,yBAAKpB,UAAU,YACf,yBAAKA,UAAU,gBACf,kBAAC,IAAD,CAAiBkB,KAAK,iBAAiBlB,UAAU,SAC/C,sCACA,4BAAKC,KAAKC,MAAMC,KAAKkB,QAArB,kB,GAxBcd,aCoELe,E,kDArEb,WAAYpB,GAAO,IAAD,gCAChB,cAAMA,IAIRqB,OALkB,GAMhBnB,UAAY,EACZC,UAAY,EACZC,OAAS,EACTkB,UAAY,GACZL,WAAW,GAVK,0BAWN,GAXM,uBAYT,GAZS,KAiDlBN,gBAAkB,WAChB,OAAO,EAAKU,MAAMC,UAAUC,KAAI,SAACC,EAAUC,GACzC,OAAO,4BAAQC,IAAKD,GAAID,OAhD1B,EAAKhB,eAAiB,EAAKA,eAAemB,KAApB,gBAHN,E,gEAgBhB5B,KAAK6B,Y,sKAIiBC,IAAMC,IAAI,kC,cAA1BC,E,gBACsBF,IAAMC,IAAI,4C,cAAhCE,E,gBACuBH,IAAMC,IAAI,kD,OAGvC,I,OADMG,EAAI,GACFR,EAAI,EAAGA,EAAIO,EAAc/B,KAAKqB,UAAUY,OAAQT,IACpDQ,EAAEE,KAAKH,EAAc/B,KAAKqB,UAAUG,GAAGW,MAG3CrC,KAAKsC,SAAS,CACZnC,UAAY,EACZC,UAAY,EACZC,OAAQ,EACRkB,UAAYW,EACZhB,WAAWc,EAAQ9B,KAAKC,UAAUoC,MAClCpB,WAAWa,EAAQ9B,KAAKE,UAAUmC,MAClCnB,QAAQY,EAAQ9B,KAAKG,OAAOkC,Q,qLAIVC,G,uFACFV,IAAMC,IAAN,mDAAsDS,EAAEC,OAAOF,Q,OAA3EG,E,OACN1C,KAAKsC,SAAS,CACZnC,UAAYuC,EAAIxC,KAAKC,UAAUoC,MAC/BnC,UAAYsC,EAAIxC,KAAKE,UAAUmC,MAC/BlC,OAASqC,EAAIxC,KAAKG,OAAOkC,Q,sIAW7B,OACE,yBAAKxC,UAAU,OACb,yBAAKA,UAAU,aACf,wBAAIA,UAAU,SAAd,gBAAuC,6BACvC,kBAAC,EAAD,CAAOG,KAAMF,KAAKsB,QAAQ,6BAC1B,kBAAC,EAAD,CAAMb,eAAgBT,KAAKS,eAAgBG,gBAAiBZ,KAAKY,kBAAmB,6BACpF,kBAAC,EAAD,CAAMV,KAAMF,KAAKsB,c,GA/DLhB,aCMEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.618f82a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport './style.css'\r\n\r\nclass Data extends Component {\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"Data\">\r\n    <div className=\"row\">\r\n    <div className=\"col-md-4\">  \r\n    <div className=\"card confirmed\">\r\n      <h1>Confirmed</h1>  \r\n      <h3>{this.props.data.confirmed} cases</h3>\r\n      </div>\r\n    </div>\r\n    <div className=\"col-md-4\">\r\n    <div className=\"card  recovered\">\r\n      <h1>Recovered</h1>\r\n      <h3>{this.props.data.recovered} cases</h3>\r\n      </div>\r\n      </div>\r\n    <div className=\"col-md-4\">\r\n    <div className=\"card deaths\">\r\n      <h1>Deaths</h1>\r\n      <h3>{this.props.data.deaths} cases</h3>\r\n      </div>\r\n    </div>\r\n\r\n    </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Data;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport './style.css'\r\n\r\nclass Form extends Component {\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"Form\">\r\n      <select onChange={this.props.getcountrydata}>\r\n      <optgroup>\r\n      <option selected hidden>select the country</option>\r\n        {this.props.returncountries()}\r\n      </optgroup>\r\n      </select>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport './style.css';\r\nimport { faGlobeAmericas } from '@fortawesome/free-solid-svg-icons';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nlibrary.add(faGlobeAmericas);\r\n\r\nclass World extends Component {\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"World\">\r\n    <div className=\"row\">\r\n    <div className=\"col-md-4\">  \r\n    <div className=\"card confirmed2\">\r\n      <FontAwesomeIcon icon=\"globe-americas\" className=\"icon\" />\r\n      <h1>Confirmed</h1>  \r\n      <h3>{this.props.data.confirmed2} cases</h3>\r\n      </div>\r\n    </div>\r\n    <div className=\"col-md-4\">\r\n    <div className=\"card  recovered2\">\r\n    <FontAwesomeIcon icon=\"globe-americas\" className=\"icon\" />\r\n      <h1>Recovered</h1>\r\n      <h3>{this.props.data.recovered2} cases</h3>\r\n      </div>\r\n      </div>\r\n    <div className=\"col-md-4\">\r\n    <div className=\"card deaths2\">\r\n    <FontAwesomeIcon icon=\"globe-americas\" className=\"icon\" />\r\n      <h1>Deaths</h1>\r\n      <h3>{this.props.data.deaths2} cases</h3>\r\n      </div>\r\n    </div>\r\n\r\n    </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default World;\r\n","import React, { Component } from 'react';\nimport axios from 'axios'\nimport Data from './components/data/index'\nimport Form from './components/form/index'\nimport World from './components/worlddata/index'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.getcountrydata = this.getcountrydata.bind(this);\n  }\n  state = {\n    confirmed : 0,\n    recovered : 0,\n    deaths : 0,\n    countries : [],\n    confirmed2:0,\n    recovered:0,\n    deaths:0\n  }\n\n  componentDidMount(){\n    this.getdata();\n  }\n\n  async getdata(){\n    const restapi = await axios.get(\"https://covid19.mathdro.id/api\");\n    const restcountries = await axios.get(\"https://covid19.mathdro.id/api/countries\");\n    const dailycountries = await axios.get(\"https://covid19.mathdro.id/api/daily/8-12-2020\");\n    //const countries = Object.keys(restcountries.data.countries);\n    const x = [];\n    for(var i = 0; i < restcountries.data.countries.length; i++){\n        x.push(restcountries.data.countries[i].name);\n     }\n\n    this.setState({\n      confirmed : 0,\n      recovered : 0,\n      deaths :0, \n      countries : x,\n      confirmed2:restapi.data.confirmed.value,\n      recovered2:restapi.data.recovered.value,\n      deaths2:restapi.data.deaths.value\n    })\n  }\n\n  async getcountrydata (e) {\n    const res = await axios.get(`https://covid19.mathdro.id/api/countries/${e.target.value}`);\n    this.setState({\n      confirmed : res.data.confirmed.value,\n      recovered : res.data.recovered.value,\n      deaths : res.data.deaths.value\n    })\n  }\n\n  returncountries = () => {\n    return this.state.countries.map((country , i) => {\n      return <option key={i}>{country}</option>\n    });\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <h1 className=\"title\">COVID-19 APP</h1><br />\n      <World data={this.state}/><br />\n      <Form getcountrydata={this.getcountrydata} returncountries={this.returncountries} /><br />\n      <Data data={this.state} />\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}